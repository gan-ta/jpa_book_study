즉시로딩과 지연로딩
영속성 전이와 고아 객체

지연로딩
=> 엔티티의 값을 실제 사용하는 시점에서 데이터베이스에서 조회
=> 가짜 객체가 필요(이를 프록시 객체라고 한다)

하이버네이트는 지연 ㅗ딩을 지원하기 위해 프록시 객체를 사용하는 방법과 바이트 코드를 수정하는 두 가지 방법을 제공
em.getReference
=> 엔티티를 실제 사용하는 시점까지 조회르 미룸
=> 데이터베이스 접근을 위힘한 프록시 객체를 반환

프록시
초기화 => 실제 엔티티가 생성되지 않으면 영속성 컨텍스틍 실제 엔티티 생성을 요청
특징
1, 처음 사용할 때 한번만 초기화
2, 프록시 객체가 초기화되면 프록시 객체를 통해서 실제 엔티티에 접근 가능
3, 원본 엔티티를 상속받은 객체임으로 타입 체크 시 두의
4, 영속성 컨텍스트에 이미 있으면 실제 엔티티 반환
5, 준영속 상태의 프록시를 초기화하면 문제가 발생

엔티티 매니저 팩토리의 PersistenceUnitUtil.isLoaded(Object entity)를 사용하면 인스턴스의 초기화 여부를 알 수 있음
하이버네이트의 initialize()메소드를 사용하면 프록시를 강제로 초기화 할 수 있다.

프록시 객체는 주로 연관된 엔티티를 지연로딩 할 때 사용
즉시로딩 => 엔티티를 조회할 때 연관된 엔티티도 함께 조회
지연로딩 => 연관된 엔티티를 실제 사용할 때 조회한다

즉시로딩은 외부조인을 사용하는데 내부조인이 성능이 더 최적화
따라서 외래키에 not null을 보장해 주게 되면 내부 조인을 사용하게 된다.

객체는 프록시객체로 처리를 하고 컬렉션은 래퍼가 지연 로딩을 처리 해 준다
=> 컬렉션에 접근해도 초기화가 되지 않고 실제 데이터를 조회할 때 데이터베이스에서 도회해서 초기화를 함

기본 fetch전략
ManyToOne, OneToOne : 즉시로딩
OneToMany, ManyToMany : 지연로딩
=> 엔티티가 하나면 즉시로딩, 엔티티가 여러개면 지연로딩
=> 추천하는 방법은 코든 연관관계에 지연 로딩을 사용하는 것

Eager사용시 주의 할 점
1, 컬렉션을 하나 이상 즉시 로딩하는 것은 권장하지 않음(결과가 n x m)
2, 컬렉션 즉시 로딩은 항상 외부 조인을 사용한다.

영속성 전이
=> 특정 엔티티를 영속 상태로 만들 때 연관된 엔티티도 함께 영속 상태로 만들고 싶을 떄
=> 부모 엔티티를 저장할 때 자식 엔티티도 함께 저장할 수 있다.


casecade = CasecadeType.PERSIST
=> 부모가 영속이면 자식까지 영속성 전이
(매핑과는 아무런 상솬이 없고 영속화 시에 편리)

casecade = CasecadeType.REMOVE(DELETE SQL)
=> 부모 엔티티만 삭제하면 연관된 자식 엔티티도 함께 삭제
(외래키 무결성 예외 방지)

종류
ALL(모두 적용)
PERSIST
MERGE
REMOVE
REFRESH
DETACH
여러 속성 지정해서 사용 사능
@OneToMany같은 매핑 어노테이션에서 사용


고아 객체

부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제하는 기능=> 고아 객체 제거
(부모 엔티티의 컬렉션에서 자식 엔티티의 참조만 제거하면 자식 엔티티가 자동으로 삭제)
고아 객체 제거 기능은 영속성 컨텍스트를 "플러시" 할 때 적용
=> 참조가 제거된 엔티티는 다른 곳에서 참조하지 않는 고아 객체로 보고 삭제하는 기능
=> 특정 개인이 소유하는 것에서만 적용을 해야 한다(OneToOne, OneToMany에서만 적용 가능)
=> 개념적으로 부모를 제거하면 자식들은 고아가 되기 때문에 CasecadeType.REMOVE를 적용한 것과 같은 효과
