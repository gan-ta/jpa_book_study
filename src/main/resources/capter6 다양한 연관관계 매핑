1, 다대일
    [양방향]
    - 양방향은 외래 키각 있는 쪽이 연관관계의 주인이다.
    - 양방향 연관관계는 항상 서로를 참조해야 한다.

2, 일대다
    [단방향]
    - 반대변 테이블의 외래키를 관리하는 형태
    - JoinColumn을 명시하지 않않으면 조인 테이블 전략을 기본으로 사용
    단점
        -객체가 관리하는 외래 키가 다른 테이블에 있음
        -다른 케이블에 외래 키각 있으면 연관관계 처리를 휘한 update sql을 추가로 실행해야 한다.
        -복잡하기 떄무넹 보통 다대일 양방향 매핑을 사용
    [양방향]
    - 일대다 양장향 매핑은 존재하지 않는다. 대신 다대일 양방향 매핑을 사용한다.
    - 일대다 단방향 매핑 반대편에 다대일 단방향 매핑을 읽기 전영으로 추가해서 일대다 양방향처럼 보이도록 한다.

3, 일대일
    [단방향]
    - 주 테이블에 외래키
    - 대상 테이블에 외래키(보통 이것을 선호)

4, 다대다
    - 보통 중간에 연결 테이블을 추가
    - @ManyToMany를 사용할 때는 @JoinTable사용
    - 보통 중간에 연결테이블을 생성하면 추가적인 컬럼들이 필요한 경우가 생길수 있으므로 추가적으로 엔티티들 생성해서 해결
    - 일대다, 다대일로 분리
    복합키 생성(pg227)
    - @IdClass사용, 식별자 클래스의 생성
    - 복합 키는 별도의 식별자 클래스로 만들어야 한다
    - Serializable을 구현해야 한다
    - equals와 hashCode 메소드를 구현해야 한다
    - 기본 생성자가 있어야 한다
    - 식별자 클래스는 public이어야 한다
    - @IdClass를 사용하는 방법 외에 @Embeddedable를 사용하는 방법도 있다.

    복합키를 생성하지 않고 새로운 기본키를 만들어서 사용하는 방법도 존재(더욱 간단)

    식별 관계 : 받아온 식별자를 기본키 + 외래키
    비식별 관계: 받아온 식별자는 외래 키로만 사용하고 새로운 식별자를 추가한다.
